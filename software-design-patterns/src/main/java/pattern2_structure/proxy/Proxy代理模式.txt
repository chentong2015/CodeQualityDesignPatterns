TODO: 在开发过程中，很多场景的问题都可以通过添加一层(动态)代理来解决
1. 可以用来分离业务规则和任何种类的实现问题，防止业务规则被污染
   将应用程序业务规则和(数据库，中间件，第三方API)进行隔离，避免业务规则受到变化带来的影响
   Application --> Proxy Layer代理层 --> API
   把所有关于应用程序和API之间的映射关系都集中到代理中，维护可能比较难

2. 代理模式是一个非常重型的解决方案，一般需要满足如下使用条件
   当代理模式所提供的应用程序和API的极端分离式有益的
   适用于API变动非常大的系统，或者同时运行许多不同的数据库引擎，中间件引擎之上的系统

应用场景
- 日志的采集
- 权限控制
- 实现aop
- Mybatis mapper
- Spring的事务
- 全局捕获异常
- Rpc远程调用接口
- 分布式事务原理代理数据源