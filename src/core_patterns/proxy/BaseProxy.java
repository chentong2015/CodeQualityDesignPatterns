package core_patterns.proxy;

// Proxy代理设计模式:
// TODO: 可以用来分离业务规则和任何种类的实现问题，防止业务规则被污染
// 1. 将应用程序业务规则和(数据库，中间件，第三方API)进行隔离，避免业务规则受到变化带来的影响
// 2. Application --> Layer 代理层 --> API
//    把所有关于应用程序和API之间的映射关系都集中到代理中，维护可能比较难

// 使用条件:
// TODO: 代理模式是一个非常重型的解决方案
// 1. 当代理模式所提供的应用程序和API的极端分离式有益的
// 2. 适用于API变动非常大的系统，或者同时运行许多不同的数据库引擎，中间件引擎之上的系统

// Proxy代理的实际运用场景:
// 被代理对象通过"代理"来对真实对象进行访问，在其中可提供额外的功能操作(比如Interceptor)
public class BaseProxy {

}
