代码的质量(整洁的代码)决定软件可扩展性，决定是否能够被理解阅读，决定是否需要重构

设计案例：
1. 大文件的生成，下载和拷贝，在程序运行的过程中，会生成临时文件，用于process的暂停和撤销
2. 软件在启动过程中，会在相同路径下生成.lock锁文件，避免用户进一步的操作
3. 软件交互，复杂的UI列表，可以使用额外静态的.res .xml配置文件进行设置

如何设计软件UI界面，方便执行Query和数据的显式?
1. 界面Query查询带有where中判断条件(比较，逻辑判断)
   - 封装界面提交的数据成XML, 利用框架转成HQL查询语句, 使用Hibernate执行查询
   - 将界面的数据直接转换成SQL查询语句，JDBC执行查询(使用ORM层中间件)
2. 将查询后的结果展示在界面table列表中，提供筛选和排序等界面操作